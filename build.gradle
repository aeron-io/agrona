/*
 * Copyright 2014-2020 Real Logic Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java-library'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '5.2.0' apply false
    id 'io.freefair.javadoc-links' version '4.1.6' apply false
    id 'biz.aQute.bnd.builder' version '4.3.1' apply false
    id "com.github.ben-manes.versions" version "0.27.0"
}

defaultTasks 'clean', 'build', 'shadowJar', 'install'

def byteBuddyVersion = '1.10.5'
def checkstyleVersion = '8.28'
def hamcrestVersion = '2.2'
def mockitoVersion = '3.2.4'
def junitVersion = '5.6.0-RC1'
def guavaTestLib = '28.2-jre'
def jmhVersion = '1.22'

def agronaGroup = 'org.agrona'
def agronaVersion = '1.1.1-SNAPSHOT'
def externalJdk = true

if (null == System.getenv("JAVA_HOME")) {
    externalJdk = false
    logger.warn("JAVA_HOME not set! Default JDK will be used.")
}

group = agronaGroup
version = agronaVersion
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

ext {
    group = agronaGroup
    version = agronaVersion

    if (!project.hasProperty('ossrhUsername')) {
        ossrhUsername = ''
    }

    if (!project.hasProperty('ossrhPassword')) {
        ossrhPassword = ''
    }
}

def projectPom = {
    name = 'agrona'
    packaging = 'pom'
    // optionally artifactId can be defined here
    description = 'High performance primitives and utility library.'
    url = 'https://github.com/real-logic/agrona'

    scm {
        connection = 'scm:git:https://github.com/real-logic/agrona.git'
        developerConnection = 'scm:git:https://github.com/real-logic/agrona.git'
        url = 'https://github.com/real-logic/agrona.git'
    }

    licenses {
        license {
            name = 'The Apache License, Version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            id = 'tmontgomery'
            name = 'Todd L. Montgomery'
            email = 'tmont@nard.net'
            url = 'https://github.com/tmontgomery'
        }
        developer {
            id = 'mjpt777'
            name = 'Martin Thompson'
            email = 'mjpt777@gmail.com'
            url = 'https://github.com/mjpt777'
        }
        developer {
            id = 'RichardWarburton'
            name = 'Richard Warburton'
            email = 'richard.warburton@gmail.com'
            url = 'https://github.com/RichardWarburton'
        }
        developer {
            id = 'nitsanw'
            name = 'Nitsan Wakart'
            email = 'nitsanw@yahoo.com'
            url = 'https://github.com/nitsanw'
        }
        developer {
            id = 'mikeb01'
            name = 'Mike Barker'
            email = 'mikeb01@gmail.com'
            url = 'https://github.com/mikeb01'
        }
        developer {
            id = 'vyazelenko'
            name = 'Dmitry Vyazelenko'
            email = 'vyazelenko@yahoo.com'
            url = 'https://github.com/vyazelenko'
        }
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

jar.enabled = false

subprojects {
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'eclipse'

    group = agronaGroup
    version = agronaVersion

    if (project.name.endsWith('-bom')) {
        return
    }

    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
    apply plugin: 'io.freefair.javadoc-links'

    jar.enabled = true

    dependencies {
        testImplementation "org.hamcrest:hamcrest:${hamcrestVersion}"
        testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    }

    checkstyle.toolVersion = "${checkstyleVersion}"

    compileJava {
        if (JavaVersion.current().ordinal() >= JavaVersion.VERSION_1_9.ordinal()) {
            options.compilerArgs.addAll(['--add-exports', 'java.base/java.lang.reflect=ALL-UNNAMED'])
            options.compilerArgs.addAll(['--add-exports', 'java.base/sun.nio.ch=ALL-UNNAMED'])
            options.compilerArgs.addAll(['--add-exports', 'jdk.unsupported/sun.misc=ALL-UNNAMED'])
        }
        options.compilerArgs << '-XDignore.symbol.file' // Suppress warnings about using Unsafe
        if (externalJdk) {
            options.fork = true
            options.forkOptions.javaHome = file("${System.env.JAVA_HOME}")
        }
        else {
            logger.warn("fork options for compilation are disabled because JAVA_HOME not set")
        }
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    compileTestJava {
        if (JavaVersion.current().ordinal() >= JavaVersion.VERSION_1_9.ordinal()) {
            options.compilerArgs.addAll(['--add-exports', 'jdk.unsupported/sun.misc=ALL-UNNAMED'])
        }
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    test {
        if (JavaVersion.current().ordinal() >= JavaVersion.VERSION_1_9.ordinal()) {
            jvmArgs('--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED')
            jvmArgs('--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED')
            jvmArgs('--add-exports', 'jdk.unsupported/sun.misc=ALL-UNNAMED')
        }

        useJUnitPlatform()

        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }

        reports.html.enabled = false // Disable individual test reports
    }

    javadoc {
        title = '<h1>Agrona</h1>'
        options.bottom = '<i>Copyright &#169; 2014-2020 Real Logic Limited. All Rights Reserved.</i>'
        options.encoding = 'UTF-8'
        options.docEncoding = 'UTF-8'
        options.charSet = 'UTF-8'
        if (JavaVersion.current().ordinal() >= JavaVersion.VERSION_1_10.ordinal()) {
            options.addBooleanOption 'html5', true
        }
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    install {
        repositories.mavenInstaller.pom.project(projectPom)
    }
}

project(':agrona') {
    apply plugin: 'biz.aQute.bnd.builder'

    dependencies {
        testImplementation("com.google.guava:guava-testlib:${guavaTestLib}") {
            exclude group: 'junit'
        }
        // Compatibility with JUnit 4
        testImplementation "junit:junit:4.13"
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junitVersion}"
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }
    }

    def generatedDir = file("${buildDir}/generated-src")
    sourceSets {
        generated.java.srcDir generatedDir
    }

    compileGeneratedJava {
        dependsOn 'generatePrimitiveSpecialisations'
        options.encoding = 'UTF-8'
        options.deprecation = true
        classpath += sourceSets.main.runtimeClasspath
    }

    task generatePrimitiveSpecialisations(type: JavaExec) {
        main = 'org.agrona.generation.SpecialisationGenerator'
        classpath = sourceSets.main.runtimeClasspath
        outputs.dir generatedDir
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
        from sourceSets.generated.allSource
    }

    jar {
        from sourceSets.generated.output

        bnd """
            Automatic-Module-Name:  org.agrona.core
            Bundle-Name:            org.agrona.core
            Bundle-SymbolicName:    org.agrona.core
            Implementation-Title:   Agrona
            Implementation-Vendor:  Real Logic Limited
            Implementation-Version: ${agronaVersion}

            -exportcontents: org.agrona, org.agrona.*

            # Suppress headers that reduce reproducibility.
            -reproducible: true
            -noextraheaders: true
        """
    }

    javadoc {
        source += sourceSets.main.allJava
        source += sourceSets.generated.allJava
        classpath = configurations.compile
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    sourceSets {
        test {
            compileClasspath += generated.output
            runtimeClasspath += generated.output
        }
    }
}

project(':agrona-agent') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        implementation project(':agrona')
        implementation "net.bytebuddy:byte-buddy:${byteBuddyVersion}"
    }

    jar {
        manifest.attributes(
            'Implementation-Title': 'Agrona',
            'Implementation-Version': "${agronaVersion}",
            'Implementation-Vendor': 'Real Logic Limited',
            'Premain-Class': 'org.agrona.agent.BufferAlignmentAgent',
            'Agent-Class': 'org.agrona.agent.BufferAlignmentAgent',
            'Can-Redefine-Classes': 'true',
            'Can-Retransform-Classes': 'true',
            'Automatic-Module-Name': 'org.agrona.agent'
        )
    }

    shadowJar {
        mustRunAfter jar

        dependencies {
            exclude(project(':agrona'))
        }

        manifest.attributes(
            'Implementation-Title': 'Agrona',
            'Implementation-Version': "${agronaVersion}",
            'Implementation-Vendor': 'Real Logic Limited',
            'Premain-Class': 'org.agrona.agent.BufferAlignmentAgent',
            'Agent-Class': 'org.agrona.agent.BufferAlignmentAgent',
            'Can-Redefine-Classes': 'true',
            'Can-Retransform-Classes': 'true',
            'Automatic-Module-Name': 'org.agrona.agent.all'
        )
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }
    }

    uploadShadow {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }

        mustRunAfter 'uploadArchives'
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.shadow
    }
}

project(':agrona-benchmarks') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        implementation "org.openjdk.jmh:jmh-core:${jmhVersion}"
        annotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"
        implementation project(':agrona')
    }

    shadowJar {
        mustRunAfter jar
        archiveFileName = 'benchmarks.jar'
        archiveClassifier = 'benchmarks'
        manifest.attributes('Main-Class': 'org.openjdk.jmh.Main')
    }
}

project(':agrona-bom') {
    apply plugin: 'java-platform'

    dependencies {
        constraints {
            api project(':agrona')
            api project(':agrona-agent')
            api project(':agrona-benchmarks')
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }
    }

    artifacts {
        // TODO: what goes here?
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    /*
    install {
        repositories.mavenInstaller.pom.project(projectPom)
    }
    */
}

task uploadToMavenCentral {
    dependsOn 'agrona:uploadArchives',
        'agrona-agent:uploadArchives',
        'agrona-agent:uploadShadow',
        'agrona-bom:uploadArchives'
}

task runBenchmarks(type: Exec, dependsOn: 'agrona-benchmarks:shadowJar') {
    commandLine 'java',
        '-jar', 'agrona-benchmarks/build/libs/benchmarks.jar',
        '-jvmArgs', '-Dagrona.disable.bounds.checks=true -XX:+UseParallelOldGC',
        '-w', '1s', '-r', '1s','-wi', '3', '-i', '5', '-tu', 'ns', '-f', '5'
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects except the bom
    reportOn subprojects*.findAll{ !it.name.endsWith('-bom') }.test

}

wrapper {
    gradleVersion = '6.0.1'
    distributionType = 'ALL'
}
